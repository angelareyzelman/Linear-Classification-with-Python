import numpy as np
import matplotlib.pyplot as plt
import csv

with open("autoData.csv") as auto_file: 
    auto_data = csv.reader(auto_file)
    cylinders = []
    displacement = []
    horsepower = []
    acceleration = []
    weight=[]
    mpg=[]

    for line in auto_data:
        cylinders += [int(line[2])]
        displacement += [int(line[3])]
        horsepower += [int(line[4])]
        acceleration += [float(line[5])]
        weight += [int(line[6])]
        mpg += [int(line[7])]

mpg_avg = sum(mpg) / len(mpg)
cylinders_avg = sum(cylinders) / len(cylinders)
displacement_avg = sum(displacement) / len(displacement)
horsepower_avg = sum(horsepower) / len(horsepower)
acceleration_avg = sum(acceleration) / len(acceleration)
weight_avg = sum(weight) / len(weight)

def covariance(a, b):
    if len(a) != len(b):
        return
    a_mean = np.mean(a)
    b_mean = np.mean(b)
    sum = 0
    for i in range(0, len(a)):
        sum += ((a[i] - a_mean) * (b[i] - b_mean))
    return sum

def variance(a):
    a_mean = np.mean(a)
    sum = 0
    for i in range(0,len(a)):
        sum += (a[i] - a_mean)**2
    return sum

        
#cylinders
B1_cylinders = covariance(cylinders,mpg) / variance(cylinders)
B0_cylinders = mpg_avg - (B1_cylinders*cylinders_avg)
#displacement
B1_displacement = covariance(displacement,mpg) / variance(displacement)
B0_displacement = mpg_avg - (B1_displacement*displacement_avg)
#horsepower
B1_horsepower = covariance(horsepower,mpg) / variance(horsepower)
B0_horsepower = mpg_avg - (B1_horsepower*horsepower_avg)
#weight
B1_weight = covariance(weight,mpg) / variance(weight)
B0_weight = mpg_avg - (B1_weight*weight_avg)
#acceleration
B1_acceleration = covariance(acceleration,mpg) / variance(acceleration)
B0_acceleration = mpg_avg - (B1_acceleration*acceleration_avg)
   
def sse_cylinders(a,b):
    sum=0
    for i in range (0,len(a)):
        sum+= ((b[i] - (B0_cylinders + (B1_cylinders*a[i])))**2)
    return sum

def sst(b):
    b_mean=np.mean(b)
    sum=0
    for i in range(0, len(b)):
        sum+=((b[i]-b_mean)**2)
    return sum

R2_cylinders = 1 - (sse_cylinders(cylinders,mpg) / sst(mpg))
print(R2_cylinders)
print(B1_cylinders)
print("Hello")

fig1 = plt.figure(num=1, clear=True)
ax1 = fig1.add_subplot(1,1,1)
x=np.linspace(0,8,1000)
y= ((B0_cylinders) + (B1_cylinders*x))
ax1.scatter(cylinders, mpg, c="black", marker=".") 
plt.plot(x,y, '-r')
plt.xlabel("Cylinders", c="white")
plt.ylabel("MPG", c="white")
plt.title("MPG vs. Cylinders", c="white")
plt.show()

fig2 = plt.figure(num=2, clear=True)
ax2 = fig2.add_subplot(1,1,1)
x=np.linspace(0,450,1000)
y= ((B0_displacement) + (B1_displacement*x))
ax2.scatter(displacement, mpg, c="black", marker=".") 
plt.plot(x,y, '-r')
plt.xlabel("Displacement", c="white")
plt.ylabel("MPG", c="white")
plt.title("MPG vs. Displacement", c="white")
plt.show()

fig3 = plt.figure(num=3, clear=True)
ax3 = fig3.add_subplot(1,1,1)
x=np.linspace(0,230,1000)
y= ((B0_horsepower) + (B1_horsepower*x))
ax3.scatter(horsepower, mpg, c="black", marker=".") 
plt.plot(x,y, '-r')
plt.xlabel("Horsepower", c="white")
plt.ylabel("MPG", c="white")
plt.title("MPG vs. Horsepower", c="white")
plt.show()

fig4 = plt.figure(num=4, clear=True)
ax4 = fig4.add_subplot(1,1,1)
x=np.linspace(0,5500,1000)
y= ((B0_weight) + (B1_weight*x))
ax4.scatter(weight, mpg, c="black", marker=".") 
plt.plot(x,y, '-r')
plt.xlabel("Weight", c="white")
plt.ylabel("MPG", c="white")
plt.title("MPG vs. Weight", c="white")
plt.show()

fig5 = plt.figure(num=5, clear=True)
ax5 = fig5.add_subplot(1,1,1)
x=np.linspace(0,30,1000)
y= ((B0_acceleration) + (B1_acceleration*x))
ax5.scatter(acceleration, mpg, c="black", marker=".") 
plt.plot(x,y, '-r')
plt.xlabel("Acceleration", c="white")
plt.ylabel("MPG", c="white")
plt.title("MPG vs. Acceleration", c="white")
plt.show()